# Create your views here.

from django.http import HttpResponse

from public.models import Gene, Molecule, Location, Comment, ProteinMonomers, Rna, Metabolite, ProteinComplex, ProteinComplexModified, ProteinMonomerModified, RnaModified, RelationStoichiometry, ProteinComplexReactionRelation,ProteinComplexModifiedReaction,ProteinComplexModReactionRelation, ProteinComplexModReactionEnzyme, ProteinMonomerModifiedReaction, ProteinMonomerModReactionEnzyme, ProteinMonomerModReactionRelation, RnaModifiedReaction, RnaModReactionEnzyme, RnaModifiedReactionRelation, MetaboliteReaction, MetaboliteReactionEnzyme, MetaboliteReactionRelation

from django.shortcuts import render_to_response, get_object_or_404
from django.db.models.query import EmptyQuerySet
import datetime
import os
from django.template import RequestContext
import ecoliwholecellkb.settings



def render_queryset_to_response(request = [], queryset = EmptyQuerySet(), models = [], templateFile = '', data = {}):	

def index(request):
    return HttpResponse("Hello, world. You're at the poll index.")
	
'''
def render_queryset_to_response(request = [], queryset = EmptyQuerySet(), models = [], templateFile = '', data = {}):	
	format = request.GET.get('format', 'html')
	
	data['queryset'] = queryset
	data['request'] = request
	data['queryargs'] = {}
	for key, val in request.GET.iterlists():
		data['queryargs'][key] = val

	if format == 'html':
		data['is_pdf'] = False
		data['pdfstyles'] = ''
		#data['last_updated_date'] = datetime.datetime.fromtimestamp(os.path.getmtime(ecoliwholecellkb.settings.TEMPLATE_DIRS[0] + '/' + templateFile))
		
		return render_to_response(templateFile, data, context_instance = RequestContext(request))

	elif format == 'bib':
		response = HttpResponse(
			write_bibtex(species, queryset),
			mimetype = "application/x-bibtex; charset=UTF-8",
			content_type = "application/x-bibtex; charset=UTF-8")
		response['Content-Disposition'] = "attachment; filename=data.bib"
	elif format == 'json':
		objects = []
		for obj in queryset.iterator():
			objDict = convert_modelobject_to_stdobject(obj, request.user.is_anonymous())
			objDict['model'] = obj.__class__.__name__
			objects.append(objDict)
		
		now = datetime.datetime.now(tzlocal())		
		json = odict()
		json['title'] = '%s WholeCellKB' % species.name
		json['comments'] = 'Generated by %s on %s at %s' % ('WholeCellKB', now.isoformat(), settings.ROOT_URL + reverse('public.views.exportData', kwargs={'species_wid': species.wid}))
		json['copyright'] = '%s %s' % (now.year, 'Covert Lab, Department of Bioengineering, Stanford University')
		json['data'] = objects
		response = HttpResponse(
			simplejson.dumps(json, indent=2, ensure_ascii=False, encoding='utf-8'),
			mimetype = "application/json; charset=UTF-8",
			content_type = "application/json; charset=UTF-8")
		response['Content-Disposition'] = "attachment; filename=data.json"
	elif format == 'pdf':
		data['is_pdf'] = True
		data['pdfstyles'] = ''
		data['species_list'] = Species.objects.all()
		data['modelmetadatas'] = getModelsMetadata(SpeciesComponent, request.user.is_anonymous())
		data['modelnames'] = getObjectTypes(SpeciesComponent, request.user.is_anonymous())

		for fileName in ['styles', 'styles.print', 'styles.pdf']:
			f = open(settings.STATICFILES_DIRS[0] + '/public/css/' + fileName + '.css', 'r')
			data['pdfstyles'] += f.read()
			f.close()

		response = HttpResponse(
			mimetype = 'application/pdf',
			content_type = 'application/pdf')
		response['Content-Disposition'] = "attachment; filename=data.pdf"

		template = get_template(templateFile)

		pdf = pisa.CreatePDF(
			src = template.render(Context(data)),
			dest = response)

		if not pdf.err:
			return response
		return Http404
	elif format == 'xlsx':
		#write work book
		wb = writeExcel(species, queryset, models, request.user.is_anonymous())

		#save to string
		result = StringIO()
		wb.save(filename = result)

		#generate HttpResponse
		response = HttpResponse(
			result.getvalue(),
			mimetype = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
			content_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
		response['Content-Disposition'] = "attachment; filename=data.xlsx"
	elif format == 'xml':
		doc = Document()
		
		now = datetime.datetime.now(tzlocal())
		comment = doc.createComment('\n%s WholeCellKB\nGenerated by %s on %s at %s\n%s %s %s\n' % (
			species.name, 
			'WholeCellKB', now.isoformat(), 
			settings.ROOT_URL + reverse('public.views.exportData', kwargs={'species_wid': species.wid}),
			html_to_ascii('&copy;'), now.year, 'Covert Lab, Department of Bioengineering, Stanford University',
			))
		doc.appendChild(comment)
		
		objects = doc.createElement('objects')
		doc.appendChild(objects)

		for obj in queryset:
			objects.appendChild(convert_modelobject_to_xml(obj, doc, request.user.is_anonymous()))

		response = HttpResponse(
			doc.toprettyxml(indent=" "*2, encoding = 'utf-8'),
			mimetype = "application/xml; charset=UTF-8",
			content_type = "application/xml; charset=UTF-8")
		response['Content-Disposition'] = "attachment; filename=data.xml"
	else:
		t = loader.get_template('public/error.html')
		data['type'] = 500
		data['message'] = '"%s" is not a supported export format.' % format
		c = Context(data)
		response =  HttpResponseBadRequest(
			t.render(c),
			mimetype = 'text/html; charset=UTF-8',
			content_type = 'text/html; charset=UTF-8')

	return response

def index(request):
		
	content = []
	list_of_genes = Gene.objects.order_by('frame_id')
	content.append([
			[0, 'Genes', len(list_of_genes), None],
			[1, 'RNA', 2, None],
			[1, 'Monomers', 4, None],
		])
		
	nContent = [len(x) for x in content]
	totContent = sum(nContent)
	cum = 0
	idx = 0
	breakIdxs = [0, 0]
	for x in nContent:
		cum += x
		idx += 1
		if cum > totContent * 1/ 3 and breakIdxs[0] == 0:
			breakIdxs[0] = idx
		if cum > totContent * 2 / 3 and breakIdxs[1] == 0:
			breakIdxs[1] = idx		
			
	contentCol1 = []
	contentCol2 = []
	contentCol3 = []
	i = 0
	for x in content[:breakIdxs[0]]:
		i += 1
		for y in x:
			contentCol1.append([i] + y)	
	i = 0
	for x in content[breakIdxs[0]:breakIdxs[1]]:
		i += 1
		for y in x:
			contentCol2.append([i] + y)
	i = 0
	for x in content[breakIdxs[1]:]:
		i += 1
		for y in x:
			contentCol3.append([i] + y)

	return render_queryset_to_response(
		request = request, 
		data = {
			'content': [contentCol1, contentCol2, contentCol3],
			'contentRows': range(max(len(contentCol1), len(contentCol2), len(contentCol3))),
			},		
		templateFile = 'public/index.html')
	


	#list_of_genes = Gene.objects.order_by('frame_id')
	#output= 'total number of genes = '+str(len(list_of_genes))
	#return HttpResponse(output)
'''
